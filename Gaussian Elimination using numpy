import numpy as np

def gaussian_elimination_manual(A, b):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)

    # Forward Elimination
    for i in range(n):
        # Partial pivoting
        max_row = i + np.argmax(abs(A[i:, i]))
        if A[max_row, i] == 0:
            raise ValueError("No unique solution: Singular matrix.")
        if max_row != i:
            A[[i, max_row]] = A[[max_row, i]]
            b[[i, max_row]] = b[[max_row, i]]

        for j in range(i + 1, n):
            factor = A[j, i] / A[i, i]
            A[j, i:] -= factor * A[i, i:]
            b[j] -= factor * b[i]

    # Back Substitution
    x = np.zeros(n)
    for i in reversed(range(n)):
        x[i] = (b[i] - np.dot(A[i, i+1:], x[i+1:])) / A[i, i]
    return x

def inverse_matrix_method(A, b):
    try:
        A_inv = np.linalg.inv(A)
        x = A_inv @ b
        return x, A_inv
    except np.linalg.LinAlgError:
        raise ValueError("Matrix is singular, cannot compute inverse.")

def main():
    n = int(input("Enter the number of variables (2 or 3): "))

    print(f"Enter the {n}x{n} matrix A:")
    A = np.array([list(map(float, input().split())) for _ in range(n)])
    
    print(f"Enter the {n}x1 vector b:")
    b = np.array([float(input()) for _ in range(n)])

    print("\n--- Solving using Gaussian Elimination (Manual) ---")
    try:
        x_gauss = gaussian_elimination_manual(A.copy(), b.copy())
        print("Solution vector x:")
        print(x_gauss)
    except ValueError as e:
        print("Error:", e)

    print("\n--- Solving using Inverse Matrix Method ---")
    try:
        x_inv, A_inv = inverse_matrix_method(A.copy(), b.copy())
        print("Inverse of A:\n", A_inv)
        print("Solution vector x:")
        print(x_inv)
    except ValueError as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
