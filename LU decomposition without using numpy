def lu_decomposition(A):
    n = len(A)
    # Initialize L and U matrices with 0s
    L = [[0.0] * n for _ in range(n)]
    U = [[0.0] * n for _ in range(n)]

    for i in range(n):
        # Constructing U
        for k in range(i, n):
            sum_ = sum(L[i][j] * U[j][k] for j in range(i))
            U[i][k] = A[i][k] - sum_

        # Constructing L
        for k in range(i, n):
            if i == k:
                L[i][i] = 1.0  # Diagonal as 1
            else:
                sum_ = sum(L[k][j] * U[j][i] for j in range(i))
                if U[i][i] == 0:
                    raise ValueError("LU decomposition not possible (division by zero)")
                L[k][i] = (A[k][i] - sum_) / U[i][i]

    return L, U

def print_matrix(mat, name="Matrix"):
    print(f"{name}:")
    for row in mat:
        print(" ".join(f"{val:8.4f}" for val in row))
    print()

def main():
    n = int(input("Enter the size of square matrix (2 or 3): "))
    print(f"Enter the {n}x{n} matrix A row by row:")
    A = [list(map(float, input().split())) for _ in range(n)]

    try:
        L, U = lu_decomposition(A)
        print_matrix(L, "Lower Triangular Matrix L")
        print_matrix(U, "Upper Triangular Matrix U")
    except ValueError as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
